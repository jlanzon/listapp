{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/ion-radio_2-ios.entry.js"],"names":["Radio","hostRef","registerInstance","inputId","radioButtonIds","name","disabled","checked","onFocus","ionFocus","emit","onBlur","ionBlur","onClick","ionDeselect","ionStyle","createEvent","ionSelect","emitStyle","isChecked","value","undefined","color","el","mode","getIonMode","labelId","label","findItemLabel","id","h","Host","role","class","Object","assign","createColorClasses","hostContext","type","getElement","RadioGroup","radioGroupIds","allowEmptySelection","onSelect","ev","selectedRadio","target","onDeselect","ionChange","updateRadios","header","querySelector","radio","findCheckedOption","componentOnReady","mutationO","watchForOptions","newOption","then","disconnect","getRadios","radios","hasChecked","Promise","all","Array","from","querySelectorAll","map","r","onIonSelect","onIonDeselect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,KAAK;AACP,iBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjBC,+DAAgB,CAAC,IAAD,EAAOD,OAAP,CAAhB;AACA,SAAKE,OAAL,oBAAyBC,cAAc,EAAvC;AACA;AACR;AACA;;AACQ,SAAKC,IAAL,GAAY,KAAKF,OAAjB;AACA;AACR;AACA;;AACQ,SAAKG,QAAL,GAAgB,KAAhB;AACA;AACR;AACA;;AACQ,SAAKC,OAAL,GAAe,KAAf;;AACA,SAAKC,OAAL,GAAe,YAAM;AACjB,WAAI,CAACC,QAAL,CAAcC,IAAd;AACH,KAFD;;AAGA,SAAKC,MAAL,GAAc,YAAM;AAChB,WAAI,CAACC,OAAL,CAAaF,IAAb;AACH,KAFD;;AAGA,SAAKG,OAAL,GAAe,YAAM;AACjB,UAAI,KAAI,CAACN,OAAT,EAAkB;AACd,aAAI,CAACO,WAAL,CAAiBJ,IAAjB;AACH,OAFD,MAGK;AACD,aAAI,CAACH,OAAL,GAAe,IAAf;AACH;AACJ,KAPD;;AAQA,SAAKQ,QAAL,GAAgBC,2DAAW,CAAC,IAAD,EAAO,UAAP,EAAmB,CAAnB,CAA3B;AACA,SAAKC,SAAL,GAAiBD,2DAAW,CAAC,IAAD,EAAO,WAAP,EAAoB,CAApB,CAA5B;AACA,SAAKF,WAAL,GAAmBE,2DAAW,CAAC,IAAD,EAAO,aAAP,EAAsB,CAAtB,CAA9B;AACA,SAAKP,QAAL,GAAgBO,2DAAW,CAAC,IAAD,EAAO,UAAP,EAAmB,CAAnB,CAA3B;AACA,SAAKJ,OAAL,GAAeI,2DAAW,CAAC,IAAD,EAAO,SAAP,EAAkB,CAAlB,CAA1B;AACH;;AAnCM;AAAA;AAAA,mCAoCQ;AACX,WAAKE,SAAL;AACH;AAtCM;AAAA;AAAA,mCAuCQC,SAvCR,EAuCmB;AACtB,UAAIA,SAAJ,EAAe;AACX,aAAKF,SAAL,CAAeP,IAAf,CAAoB;AAChBH,iBAAO,EAAE,IADO;AAEhBa,eAAK,EAAE,KAAKA;AAFI,SAApB;AAIH;;AACD,WAAKF,SAAL;AACH;AA/CM;AAAA;AAAA,sCAgDW;AACd,WAAKA,SAAL;AACH;AAlDM;AAAA;AAAA,wCAmDa;AAChB,UAAI,KAAKE,KAAL,KAAeC,SAAnB,EAA8B;AAC1B,aAAKD,KAAL,GAAa,KAAKjB,OAAlB;AACH;;AACD,WAAKe,SAAL;AACH;AAxDM;AAAA;AAAA,gCAyDK;AACR,WAAKH,QAAL,CAAcL,IAAd,CAAmB;AACf,yBAAiB,KAAKH,OADP;AAEf,gCAAwB,KAAKD;AAFd,OAAnB;AAIH;AA9DM;AAAA;AAAA,6BA+DE;AAAA;;AAAA,UACGH,OADH,GAC6C,IAD7C,CACGA,OADH;AAAA,UACYG,QADZ,GAC6C,IAD7C,CACYA,QADZ;AAAA,UACsBC,OADtB,GAC6C,IAD7C,CACsBA,OADtB;AAAA,UAC+Be,KAD/B,GAC6C,IAD7C,CAC+BA,KAD/B;AAAA,UACsCC,EADtC,GAC6C,IAD7C,CACsCA,EADtC;AAEL,UAAMC,IAAI,GAAGC,2DAAU,CAAC,IAAD,CAAvB;AACA,UAAMC,OAAO,GAAGvB,OAAO,GAAG,MAA1B;AACA,UAAMwB,KAAK,GAAGC,8DAAa,CAACL,EAAD,CAA3B;;AACA,UAAII,KAAJ,EAAW;AACPA,aAAK,CAACE,EAAN,GAAWH,OAAX;AACH;;AACD,aAAQI,2DAAC,CAACC,mDAAD,EAAO;AAAElB,eAAO,EAAE,KAAKA,OAAhB;AAAyBmB,YAAI,EAAE,OAA/B;AAAwC,yBAAiB1B,QAAQ,GAAG,MAAH,GAAY,IAA7E;AAAmF,kCAAmBC,OAAnB,CAAnF;AAAiH,2BAAmBmB,OAApI;AAA6IO,aAAK,EAAEC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,4DAAkB,CAACd,KAAD,CAApC,CAAd,oLAA+DE,IAA/D,EAAsE,IAAtE,+JAA4E,SAA5E,EAAuFa,4DAAW,CAAC,UAAD,EAAad,EAAb,CAAlG,+JAAoH,aAApH,EAAmI,IAAnI,+JAAyI,eAAzI,EAA0JhB,OAA1J,+JAAmK,gBAAnK,EAAqLD,QAArL;AAApJ,OAAP,EAA+VwB,2DAAC,CAAC,KAAD,EAAQ;AAAEG,aAAK,EAAE;AAAT,OAAR,EAAiCH,2DAAC,CAAC,KAAD,EAAQ;AAAEG,aAAK,EAAE;AAAT,OAAR,CAAlC,CAAhW,EAAsaH,2DAAC,CAAC,QAAD,EAAW;AAAEQ,YAAI,EAAE,QAAR;AAAkB9B,eAAO,EAAE,KAAKA,OAAhC;AAAyCG,cAAM,EAAE,KAAKA,MAAtD;AAA8DL,gBAAQ,EAAEA;AAAxE,OAAX,CAAva,CAAT;AACH;AAxEM;AAAA;AAAA,wBAyEE;AAAE,aAAOiC,2DAAU,CAAC,IAAD,CAAjB;AAA0B;AAzE9B;AAAA;AAAA,wBA0Ee;AAAE,aAAO;AAC3B,iBAAS,CAAC,cAAD,CADkB;AAE3B,mBAAW,CAAC,gBAAD,CAFgB;AAG3B,oBAAY,CAAC,iBAAD;AAHe,OAAP;AAIpB;AA9EG;AAAA;AAAA,wBA+EY;AAAE,aAAO,kgFAAP;AAA4gF;AA/E1hF;;AAAA;AAAA,GAAX;;AAiFA,IAAInC,cAAc,GAAG,CAArB;;AAEA,IAAMoC,UAAU;AACZ,sBAAYvC,OAAZ,EAAqB;AAAA;;AAAA;;AACjBC,+DAAgB,CAAC,IAAD,EAAOD,OAAP,CAAhB;AACA,SAAKE,OAAL,oBAAyBsC,aAAa,EAAtC;AACA,SAAKf,OAAL,aAAkB,KAAKvB,OAAvB;AACA;AACR;AACA;;AACQ,SAAKuC,mBAAL,GAA2B,KAA3B;AACA;AACR;AACA;;AACQ,SAAKrC,IAAL,GAAY,KAAKF,OAAjB;;AACA,SAAKwC,QAAL,GAAgB,UAACC,EAAD,EAAQ;AACpB,UAAMC,aAAa,GAAGD,EAAE,CAACE,MAAzB;;AACA,UAAID,aAAJ,EAAmB;AACf,cAAI,CAACzB,KAAL,GAAayB,aAAa,CAACzB,KAA3B;AACH;AACJ,KALD;;AAMA,SAAK2B,UAAL,GAAkB,UAACH,EAAD,EAAQ;AACtB,UAAMC,aAAa,GAAGD,EAAE,CAACE,MAAzB;;AACA,UAAID,aAAJ,EAAmB;AACfA,qBAAa,CAACtC,OAAd,GAAwB,KAAxB;AACA,cAAI,CAACa,KAAL,GAAaC,SAAb;AACH;AACJ,KAND;;AAOA,SAAK2B,SAAL,GAAiBhC,2DAAW,CAAC,IAAD,EAAO,WAAP,EAAoB,CAApB,CAA5B;AACH;;AA3BW;AAAA;AAAA,iCA4BCI,KA5BD,EA4BQ;AAChB,WAAK6B,YAAL;AACA,WAAKD,SAAL,CAAetC,IAAf,CAAoB;AAAEU,aAAK,EAALA;AAAF,OAApB;AACH;AA/BW;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAiCR;AACA;AACMG,kBAnCE,GAmCG,KAAKA,EAnCR;AAoCF2B,sBApCE,GAoCO3B,EAAE,CAAC4B,aAAH,CAAiB,iBAAjB,KAAuC5B,EAAE,CAAC4B,aAAH,CAAiB,kBAAjB,CApC9C;;AAqCR,oBAAID,MAAJ,EAAY;AACFvB,uBADE,GACMuB,MAAM,CAACC,aAAP,CAAqB,WAArB,CADN;;AAER,sBAAIxB,KAAJ,EAAW;AACP,yBAAKD,OAAL,GAAeC,KAAK,CAACE,EAAN,GAAW,KAAKxB,IAAL,GAAY,MAAtC;AACH;AACJ;;AA1CO,sBA2CJ,KAAKe,KAAL,KAAeC,SA3CX;AAAA;AAAA;AAAA;;AA4CE+B,qBA5CF,GA4CUC,qEAAiB,CAAC9B,EAAD,EAAK,WAAL,CA5C3B;;AAAA,sBA6CA6B,KAAK,KAAK/B,SA7CV;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA8CM+B,KAAK,CAACE,gBAAN,EA9CN;;AAAA;AA+CA,oBAAI,KAAKlC,KAAL,KAAeC,SAAnB,EAA8B;AAC1B,uBAAKD,KAAL,GAAagC,KAAK,CAAChC,KAAnB;AACH;;AAjDD;AAoDR,qBAAKmC,SAAL,GAAiBC,qEAAe,CAACjC,EAAD,EAAK,WAAL,EAAkB,UAAAkC,SAAS,EAAI;AAC3D,sBAAIA,SAAS,KAAKpC,SAAlB,EAA6B;AACzBoC,6BAAS,CAACH,gBAAV,GAA6BI,IAA7B,CAAkC,YAAM;AACpC,4BAAI,CAACtC,KAAL,GAAaqC,SAAS,CAACrC,KAAvB;AACH,qBAFD;AAGH,mBAJD,MAKK;AACD,0BAAI,CAAC6B,YAAL;AACH;AACJ,iBAT+B,CAAhC;AAUA,qBAAKA,YAAL;;AA9DQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2CAgEW;AACnB,UAAI,KAAKM,SAAT,EAAoB;AAChB,aAAKA,SAAL,CAAeI,UAAf;AACA,aAAKJ,SAAL,GAAiBlC,SAAjB;AACH;AACJ;AArEW;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA4Ea,KAAKuC,SAAL,EA5Eb;;AAAA;AA4EFC,sBA5EE;AA6EAzC,qBA7EA,GA6EU,IA7EV,CA6EAA,KA7EA;AA8EJ0C,0BA9EI,GA8ES,KA9ET,EA+ER;;AA/EQ,mLAgFYD,MAhFZ;;AAAA;AAgFR,sEAA4B;AAAjBT,yBAAiB;;AACxB,wBAAI,CAACU,UAAD,IAAeV,KAAK,CAAChC,KAAN,KAAgBA,KAAnC,EAA0C;AACtC;AACA;AACA;AACA0C,gCAAU,GAAG,IAAb;AACAV,2BAAK,CAAC7C,OAAN,GAAgB,IAAhB;AACH,qBAND,MAOK;AACD;AACA;AACA6C,2BAAK,CAAC7C,OAAN,GAAgB,KAAhB;AACH;AACJ,mBA7FO,CA8FR;;AA9FQ;AAAA;AAAA;AAAA;AAAA;;AA+FR,oBAAI,CAACuD,UAAL,EAAiB;AACb,uBAAK1C,KAAL,GAAaC,SAAb;AACH;;AAjGO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gCAmGA;AACR,aAAO0C,OAAO,CAACC,GAAR,CAAYC,KAAK,CACnBC,IADc,CACT,KAAK3C,EAAL,CAAQ4C,gBAAR,CAAyB,WAAzB,CADS,EAEdC,GAFc,CAEV,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACf,gBAAF,EAAJ;AAAA,OAFS,CAAZ,CAAP;AAGH;AAvGW;AAAA;AAAA,6BAwGH;AACL,aAAQxB,2DAAC,CAACC,mDAAD,EAAO;AAAEC,YAAI,EAAE,YAAR;AAAsB,2BAAmB,KAAKN,OAA9C;AAAuD4C,mBAAW,EAAE,KAAK3B,QAAzE;AAAmF4B,qBAAa,EAAE,KAAK7B,mBAAL,GAA2B,KAAKK,UAAhC,GAA6C1B,SAA/I;AAA0JY,aAAK,EAAER,2DAAU,CAAC,IAAD;AAA3K,OAAP,CAAT;AACH;AA1GW;AAAA;AAAA,wBA2GH;AAAE,aAAOc,2DAAU,CAAC,IAAD,CAAjB;AAA0B;AA3GzB;AAAA;AAAA,wBA4GU;AAAE,aAAO;AAC3B,iBAAS,CAAC,cAAD;AADkB,OAAP;AAEpB;AA9GQ;;AAAA;AAAA,GAAhB;;AAgHA,IAAIE,aAAa,GAAG,CAApB","file":"48.js","sourcesContent":["import { r as registerInstance, d as createEvent, c as getIonMode, h, H as Host, e as getElement } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\nimport { f as findItemLabel } from './helpers-46f4a262.js';\nimport { c as createColorClasses, h as hostContext } from './theme-18cbe2cc.js';\nimport { f as findCheckedOption, w as watchForOptions } from './watch-options-2af96011.js';\n\nconst Radio = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.inputId = `ion-rb-${radioButtonIds++}`;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * If `true`, the user cannot interact with the radio.\n         */\n        this.disabled = false;\n        /**\n         * If `true`, the radio is selected.\n         */\n        this.checked = false;\n        this.onFocus = () => {\n            this.ionFocus.emit();\n        };\n        this.onBlur = () => {\n            this.ionBlur.emit();\n        };\n        this.onClick = () => {\n            if (this.checked) {\n                this.ionDeselect.emit();\n            }\n            else {\n                this.checked = true;\n            }\n        };\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n        this.ionSelect = createEvent(this, \"ionSelect\", 7);\n        this.ionDeselect = createEvent(this, \"ionDeselect\", 7);\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    }\n    colorChanged() {\n        this.emitStyle();\n    }\n    checkedChanged(isChecked) {\n        if (isChecked) {\n            this.ionSelect.emit({\n                checked: true,\n                value: this.value\n            });\n        }\n        this.emitStyle();\n    }\n    disabledChanged() {\n        this.emitStyle();\n    }\n    componentWillLoad() {\n        if (this.value === undefined) {\n            this.value = this.inputId;\n        }\n        this.emitStyle();\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            'radio-checked': this.checked,\n            'interactive-disabled': this.disabled,\n        });\n    }\n    render() {\n        const { inputId, disabled, checked, color, el } = this;\n        const mode = getIonMode(this);\n        const labelId = inputId + '-lbl';\n        const label = findItemLabel(el);\n        if (label) {\n            label.id = labelId;\n        }\n        return (h(Host, { onClick: this.onClick, role: \"radio\", \"aria-disabled\": disabled ? 'true' : null, \"aria-checked\": `${checked}`, \"aria-labelledby\": labelId, class: Object.assign(Object.assign({}, createColorClasses(color)), { [mode]: true, 'in-item': hostContext('ion-item', el), 'interactive': true, 'radio-checked': checked, 'radio-disabled': disabled }) }, h(\"div\", { class: \"radio-icon\" }, h(\"div\", { class: \"radio-inner\" })), h(\"button\", { type: \"button\", onFocus: this.onFocus, onBlur: this.onBlur, disabled: disabled })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"color\": [\"colorChanged\"],\n        \"checked\": [\"checkedChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n    static get style() { return \":host{display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;contain:layout size style}.radio-icon,button{width:100%;height:100%}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}:host-context([dir=rtl]) button,[dir=rtl] button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}:host{--color-checked:var(--ion-color-primary,#3880ff);width:15px;height:24px}:host(.ion-color.radio-checked) .radio-inner{border-color:var(--ion-color-base)}.item-radio.item-ios ion-label{margin-left:0}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.item-radio.item-ios ion-label{margin-left:unset;-webkit-margin-start:0;margin-inline-start:0}}.radio-inner{width:33%;height:50%}:host(.radio-checked) .radio-inner{-webkit-transform:rotate(45deg);transform:rotate(45deg);border-width:2px;border-top-width:0;border-left-width:0;border-style:solid;border-color:var(--color-checked)}:host(.radio-disabled){opacity:.3}:host(.ion-focused) .radio-icon:after{border-radius:50%;left:-9px;top:-8px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint,#4c8dff);content:\\\"\\\";opacity:.2}:host-context([dir=rtl]).ion-focused .radio-icon:after,:host-context([dir=rtl]):host(.ion-focused) .radio-icon:after{left:unset;right:unset;right:-9px}:host(.in-item){margin-left:8px;margin-right:11px;margin-top:8px;margin-bottom:8px;display:block;position:static}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host(.in-item){margin-left:unset;margin-right:unset;-webkit-margin-start:8px;margin-inline-start:8px;-webkit-margin-end:11px;margin-inline-end:11px}}:host(.in-item[slot=start]){margin-left:3px;margin-right:21px;margin-top:8px;margin-bottom:8px}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:3px;margin-inline-start:3px;-webkit-margin-end:21px;margin-inline-end:21px}}\"; }\n};\nlet radioButtonIds = 0;\n\nconst RadioGroup = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.inputId = `ion-rg-${radioGroupIds++}`;\n        this.labelId = `${this.inputId}-lbl`;\n        /**\n         * If `true`, the radios can be deselected.\n         */\n        this.allowEmptySelection = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        this.onSelect = (ev) => {\n            const selectedRadio = ev.target;\n            if (selectedRadio) {\n                this.value = selectedRadio.value;\n            }\n        };\n        this.onDeselect = (ev) => {\n            const selectedRadio = ev.target;\n            if (selectedRadio) {\n                selectedRadio.checked = false;\n                this.value = undefined;\n            }\n        };\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n    }\n    valueChanged(value) {\n        this.updateRadios();\n        this.ionChange.emit({ value });\n    }\n    async connectedCallback() {\n        // Get the list header if it exists and set the id\n        // this is used to set aria-labelledby\n        const el = this.el;\n        const header = el.querySelector('ion-list-header') || el.querySelector('ion-item-divider');\n        if (header) {\n            const label = header.querySelector('ion-label');\n            if (label) {\n                this.labelId = label.id = this.name + '-lbl';\n            }\n        }\n        if (this.value === undefined) {\n            const radio = findCheckedOption(el, 'ion-radio');\n            if (radio !== undefined) {\n                await radio.componentOnReady();\n                if (this.value === undefined) {\n                    this.value = radio.value;\n                }\n            }\n        }\n        this.mutationO = watchForOptions(el, 'ion-radio', newOption => {\n            if (newOption !== undefined) {\n                newOption.componentOnReady().then(() => {\n                    this.value = newOption.value;\n                });\n            }\n            else {\n                this.updateRadios();\n            }\n        });\n        this.updateRadios();\n    }\n    disconnectedCallback() {\n        if (this.mutationO) {\n            this.mutationO.disconnect();\n            this.mutationO = undefined;\n        }\n    }\n    async updateRadios() {\n        /**\n         * Make sure we get all radios first\n         * so values are up to date prior\n         * to caching the radio group value\n         */\n        const radios = await this.getRadios();\n        const { value } = this;\n        let hasChecked = false;\n        // Walk the DOM in reverse order, since the last selected one wins!\n        for (const radio of radios) {\n            if (!hasChecked && radio.value === value) {\n                // correct value for this radio\n                // but this radio isn't checked yet\n                // and we haven't found a checked yet\n                hasChecked = true;\n                radio.checked = true;\n            }\n            else {\n                // this radio doesn't have the correct value\n                // or the radio group has been already checked\n                radio.checked = false;\n            }\n        }\n        // Reset value if\n        if (!hasChecked) {\n            this.value = undefined;\n        }\n    }\n    getRadios() {\n        return Promise.all(Array\n            .from(this.el.querySelectorAll('ion-radio'))\n            .map(r => r.componentOnReady()));\n    }\n    render() {\n        return (h(Host, { role: \"radiogroup\", \"aria-labelledby\": this.labelId, onIonSelect: this.onSelect, onIonDeselect: this.allowEmptySelection ? this.onDeselect : undefined, class: getIonMode(this) }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"value\": [\"valueChanged\"]\n    }; }\n};\nlet radioGroupIds = 0;\n\nexport { Radio as ion_radio, RadioGroup as ion_radio_group };\n"],"sourceRoot":"webpack:///"}