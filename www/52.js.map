{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/ion-refresher_2-ios.entry.js"],"names":["Refresher","hostRef","registerInstance","appliedStyles","didStart","progress","state","pullMin","pullMax","closeDuration","snapbackDuration","pullFactor","disabled","ionRefresh","createEvent","ionPull","ionStart","gesture","setDisabled","el","getAttribute","console","error","contentEl","closest","getScrollElement","scrollEl","createGesture","gestureName","gesturePriority","direction","threshold","passive","canStart","onStart","onMove","ev","onEnd","disabledChanged","undefined","destroy","close","Promise","resolve","scrollTop","detail","event","touches","length","Number","isNaN","deltaY","setCss","scrollHostScrollTop","cancelable","preventDefault","emit","beginRefresh","cancel","complete","bind","delay","setTimeout","y","duration","overflowVisible","writeTask","style","transform","transitionDuration","transitionDelay","overflow","mode","getIonMode","h","Host","slot","class","getElement","RefresherContent","pullingIcon","config","get","refreshingSpinner","icon","lazy","pullingText","innerHTML","sanitizeDOMString","name","refreshingText"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA,IAAMA,SAAS;AACX,qBAAYC,OAAZ,EAAqB;AAAA;;AACjBC,+DAAgB,CAAC,IAAD,EAAOD,OAAP,CAAhB;AACA,SAAKE,aAAL,GAAqB,KAArB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,KAAL,GAAa;AAAE;AAAf;AACA;AACR;AACA;AACA;;AACQ,SAAKC,OAAL,GAAe,EAAf;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,OAAL,GAAe,KAAKD,OAAL,GAAe,EAA9B;AACA;AACR;AACA;;AACQ,SAAKE,aAAL,GAAqB,OAArB;AACA;AACR;AACA;;AACQ,SAAKC,gBAAL,GAAwB,OAAxB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,UAAL,GAAkB,CAAlB;AACA;AACR;AACA;;AACQ,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,UAAL,GAAkBC,2DAAW,CAAC,IAAD,EAAO,YAAP,EAAqB,CAArB,CAA7B;AACA,SAAKC,OAAL,GAAeD,2DAAW,CAAC,IAAD,EAAO,SAAP,EAAkB,CAAlB,CAA1B;AACA,SAAKE,QAAL,GAAgBF,2DAAW,CAAC,IAAD,EAAO,UAAP,EAAmB,CAAnB,CAA3B;AACH;;AAvDU;AAAA;AAAA,sCAwDO;AACd,UAAI,KAAKG,OAAT,EAAkB;AACd,aAAKA,OAAL,CAAaC,WAAb,CAAyB,KAAKN,QAA9B;AACH;AACJ;AA5DU;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA8DH,KAAKO,EAAL,CAAQC,YAAR,CAAqB,MAArB,MAAiC,OA9D9B;AAAA;AAAA;AAAA;;AA+DHC,uBAAO,CAACC,KAAR,CAAc,iDAAd;AA/DG;;AAAA;AAkEDC,yBAlEC,GAkEW,KAAKJ,EAAL,CAAQK,OAAR,CAAgB,aAAhB,CAlEX;;AAAA,oBAmEFD,SAnEE;AAAA;AAAA;AAAA;;AAoEHF,uBAAO,CAACC,KAAR,CAAc,sDAAd;AApEG;;AAAA;AAAA;AAAA,uBAuEeC,SAAS,CAACE,gBAAV,EAvEf;;AAAA;AAuEP,qBAAKC,QAvEE;AAAA;AAAA,uBAwEe,wGAxEf;;AAAA;AAwEP,qBAAKT,OAxEE,iBAwE8CU,aAxE9C,CAwE4D;AAC/DR,oBAAE,EAAEI,SAD2D;AAE/DK,6BAAW,EAAE,WAFkD;AAG/DC,iCAAe,EAAE,EAH8C;AAI/DC,2BAAS,EAAE,GAJoD;AAK/DC,2BAAS,EAAE,EALoD;AAM/DC,yBAAO,EAAE,KANsD;AAO/DC,0BAAQ,EAAE;AAAA,2BAAM,KAAI,CAACA,QAAL,EAAN;AAAA,mBAPqD;AAQ/DC,yBAAO,EAAE;AAAA,2BAAM,KAAI,CAACA,OAAL,EAAN;AAAA,mBARsD;AAS/DC,wBAAM,EAAE,gBAAAC,EAAE;AAAA,2BAAI,KAAI,CAACD,MAAL,CAAYC,EAAZ,CAAJ;AAAA,mBATqD;AAU/DC,uBAAK,EAAE;AAAA,2BAAM,KAAI,CAACA,KAAL,EAAN;AAAA;AAVwD,iBAxE5D;AAoFP,qBAAKC,eAAL;;AApFO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2CAsFY;AACnB,WAAKZ,QAAL,GAAgBa,SAAhB;;AACA,UAAI,KAAKtB,OAAT,EAAkB;AACd,aAAKA,OAAL,CAAauB,OAAb;AACA,aAAKvB,OAAL,GAAesB,SAAf;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AArGe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuGP,qBAAKE,KAAL,CAAW;AAAG;AAAd,kBAAgC,OAAhC;;AAvGO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyGX;AACJ;AACA;;AA3Ge;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6GP,qBAAKA,KAAL,CAAW;AAAG;AAAd,kBAAgC,EAAhC;;AA7GO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA+GX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAvHe;AAAA;AAAA,kCAwHG;AACV,aAAOC,OAAO,CAACC,OAAR,CAAgB,KAAKtC,QAArB,CAAP;AACH;AA1HU;AAAA;AAAA,+BA2HA;AACP,UAAI,CAAC,KAAKqB,QAAV,EAAoB;AAChB,eAAO,KAAP;AACH;;AACD,UAAI,KAAKpB,KAAL,KAAe;AAAE;AAArB,QAAqC;AACjC,iBAAO,KAAP;AACH,SANM,CAOP;AACA;;;AACA,UAAI,KAAKoB,QAAL,CAAckB,SAAd,GAA0B,CAA9B,EAAiC;AAC7B,eAAO,KAAP;AACH;;AACD,aAAO,IAAP;AACH;AAxIU;AAAA;AAAA,8BAyID;AACN,WAAKvC,QAAL,GAAgB,CAAhB;AACA,WAAKC,KAAL,GAAa;AAAE;AAAf;AACH;AA5IU;AAAA;AAAA,2BA6IJuC,MA7II,EA6II;AACX,UAAI,CAAC,KAAKnB,QAAV,EAAoB;AAChB;AACH,OAHU,CAIX;AACA;AACA;AACA;;;AACA,UAAMU,EAAE,GAAGS,MAAM,CAACC,KAAlB;;AACA,UAAIV,EAAE,CAACW,OAAH,IAAcX,EAAE,CAACW,OAAH,CAAWC,MAAX,GAAoB,CAAtC,EAAyC;AACrC;AACH,OAXU,CAYX;AACA;AACA;;;AACA,UAAI,CAAC,KAAK1C,KAAL,GAAa;AAAG;AAAjB,YAAmC,CAAvC,EAA0C;AACtC;AACH;;AACD,UAAMK,UAAU,GAAIsC,MAAM,CAACC,KAAP,CAAa,KAAKvC,UAAlB,KAAiC,KAAKA,UAAL,GAAkB,CAApD,GAAyD,CAAzD,GAA6D,KAAKA,UAArF;AACA,UAAMwC,MAAM,GAAGN,MAAM,CAACM,MAAP,GAAgBxC,UAA/B,CAnBW,CAoBX;AACA;;AACA,UAAIwC,MAAM,IAAI,CAAd,EAAiB;AACb;AACA;AACA,aAAK9C,QAAL,GAAgB,CAAhB;AACA,aAAKC,KAAL,GAAa;AAAE;AAAf;;AACA,YAAI,KAAKH,aAAT,EAAwB;AACpB;AACA,eAAKiD,MAAL,CAAY,CAAZ,EAAe,EAAf,EAAmB,KAAnB,EAA0B,EAA1B;AACA;AACH;;AACD;AACH;;AACD,UAAI,KAAK9C,KAAL,KAAe;AAAE;AAArB,QAAqC;AACjC;AACA;AACA,cAAM+C,mBAAmB,GAAG,KAAK3B,QAAL,CAAckB,SAA1C,CAHiC,CAIjC;AACA;;AACA,cAAIS,mBAAmB,GAAG,CAA1B,EAA6B;AACzB,iBAAKhD,QAAL,GAAgB,CAAhB;AACA;AACH,WATgC,CAUjC;;;AACA,eAAKC,KAAL,GAAa;AAAE;AAAf;AACH,SA9CU,CA+CX;;;AACA,UAAI8B,EAAE,CAACkB,UAAP,EAAmB;AACflB,UAAE,CAACmB,cAAH;AACH,OAlDU,CAmDX;AACA;;;AACA,WAAKH,MAAL,CAAYD,MAAZ,EAAoB,KAApB,EAA2B,IAA3B,EAAiC,EAAjC;;AACA,UAAIA,MAAM,KAAK,CAAf,EAAkB;AACd;AACA,aAAK9C,QAAL,GAAgB,CAAhB;AACA;AACH;;AACD,UAAME,OAAO,GAAG,KAAKA,OAArB,CA3DW,CA4DX;;AACA,WAAKF,QAAL,GAAgB8C,MAAM,GAAG5C,OAAzB,CA7DW,CA8DX;;AACA,UAAI,CAAC,KAAKH,QAAV,EAAoB;AAChB,aAAKA,QAAL,GAAgB,IAAhB;AACA,aAAKY,QAAL,CAAcwC,IAAd;AACH,OAlEU,CAmEX;;;AACA,WAAKzC,OAAL,CAAayC,IAAb,GApEW,CAqEX;;AACA,UAAIL,MAAM,GAAG5C,OAAb,EAAsB;AAClB;AACA,aAAKD,KAAL,GAAa;AAAE;AAAf;AACA;AACH;;AACD,UAAI6C,MAAM,GAAG,KAAK3C,OAAlB,EAA2B;AACvB;AACA,aAAKiD,YAAL;AACA;AACH,OA/EU,CAgFX;AACA;AACA;;;AACA,WAAKnD,KAAL,GAAa;AAAE;AAAf;AACA;AACH;AAlOU;AAAA;AAAA,4BAmOH;AACJ;AACA,UAAI,KAAKA,KAAL,KAAe;AAAE;AAArB,QAAkC;AAC9B;AACA,eAAKmD,YAAL;AACH,SAHD,MAIK,IAAI,KAAKnD,KAAL,KAAe;AAAE;AAArB,QAAoC;AACrC;AACA;AACA;AACA;AACA,eAAKoD,MAAL;AACH;AACJ;AAhPU;AAAA;AAAA,mCAiPI;AACX;AACA;AACA,WAAKpD,KAAL,GAAa;AAAE;AAAf,OAHW,CAIX;;AACA,WAAK8C,MAAL,CAAY,KAAK7C,OAAjB,EAA0B,KAAKG,gBAA/B,EAAiD,IAAjD,EAAuD,EAAvD,EALW,CAMX;AACA;;AACA,WAAKG,UAAL,CAAgB2C,IAAhB,CAAqB;AACjBG,gBAAQ,EAAE,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB;AADO,OAArB;AAGH;AA5PU;AAAA;AAAA,0BA6PLtD,KA7PK,EA6PEuD,KA7PF,EA6PS;AAAA;;AAChB;AACAC,gBAAU,CAAC,YAAM;AACb,cAAI,CAACxD,KAAL,GAAa;AAAE;AAAf;AACA,cAAI,CAACD,QAAL,GAAgB,CAAhB;AACA,cAAI,CAACD,QAAL,GAAgB,KAAhB;;AACA,cAAI,CAACgD,MAAL,CAAY,CAAZ,EAAe,KAAf,EAAsB,KAAtB,EAA6B,EAA7B;AACH,OALS,EAKP,GALO,CAAV,CAFgB,CAQhB;AACA;;AACA,WAAK9C,KAAL,GAAaA,KAAb;AACA,WAAK8C,MAAL,CAAY,CAAZ,EAAe,KAAK3C,aAApB,EAAmC,IAAnC,EAAyCoD,KAAzC,EAXgB,CAYhB;AACH;AA1QU;AAAA;AAAA,2BA2QJE,CA3QI,EA2QDC,QA3QC,EA2QSC,eA3QT,EA2Q0BJ,KA3Q1B,EA2QiC;AAAA;;AACxC,WAAK1D,aAAL,GAAsB4D,CAAC,GAAG,CAA1B;AACAG,iEAAS,CAAC,YAAM;AACZ,YAAI,MAAI,CAACxC,QAAT,EAAmB;AACf,cAAMyC,KAAK,GAAG,MAAI,CAACzC,QAAL,CAAcyC,KAA5B;AACAA,eAAK,CAACC,SAAN,GAAoBL,CAAC,GAAG,CAAL,wBAAwBA,CAAxB,2BAAiD,iBAApE;AACAI,eAAK,CAACE,kBAAN,GAA2BL,QAA3B;AACAG,eAAK,CAACG,eAAN,GAAwBT,KAAxB;AACAM,eAAK,CAACI,QAAN,GAAkBN,eAAe,GAAG,QAAH,GAAc,EAA/C;AACH;AACJ,OARQ,CAAT;AASH;AAtRU;AAAA;AAAA,6BAuRF;AAAA;;AACL,UAAMO,IAAI,GAAGC,2DAAU,CAAC,IAAD,CAAvB;AACA,aAAQC,2DAAC,CAACC,mDAAD,EAAO;AAAEC,YAAI,EAAE,OAAR;AAAiBC,aAAK,+IAC7BL,IAD6B,EACtB,IADsB,sJAGhBA,IAHgB,GAGP,IAHO,kIAI9B,kBAJ8B,EAIV,KAAKlE,KAAL,KAAe,CAJL,kIAK9B,mBAL8B,EAKT,KAAKA,KAAL,KAAe,CALN,kIAM9B,iBAN8B,EAMX,KAAKA,KAAL,KAAe,CANJ,kIAO9B,sBAP8B,EAON,KAAKA,KAAL,KAAe,CAPT,kIAQ9B,sBAR8B,EAQN,KAAKA,KAAL,KAAe,EART,kIAS9B,sBAT8B,EASN,KAAKA,KAAL,KAAe,EATT;AAAtB,OAAP,CAAT;AAWH;AApSU;AAAA;AAAA,wBAqSF;AAAE,aAAOwE,2DAAU,CAAC,IAAD,CAAjB;AAA0B;AArS1B;AAAA;AAAA,wBAsSW;AAAE,aAAO;AAC3B,oBAAY,CAAC,iBAAD;AADe,OAAP;AAEpB;AAxSO;AAAA;AAAA,wBAySQ;AAAE,aAAO,uwEAAP;AAAixE;AAzS3xE;;AAAA;AAAA,GAAf;;AA4SA,IAAMC,gBAAgB;AAClB,4BAAY9E,OAAZ,EAAqB;AAAA;;AACjBC,+DAAgB,CAAC,IAAD,EAAOD,OAAP,CAAhB;AACH;;AAHiB;AAAA;AAAA,wCAIE;AAChB,UAAI,KAAK+E,WAAL,KAAqBzC,SAAzB,EAAoC;AAChC,aAAKyC,WAAL,GAAmBC,qDAAM,CAACC,GAAP,CAAW,gBAAX,EAA6B,YAA7B,CAAnB;AACH;;AACD,UAAI,KAAKC,iBAAL,KAA2B5C,SAA/B,EAA0C;AACtC,YAAMiC,IAAI,GAAGC,2DAAU,CAAC,IAAD,CAAvB;AACA,aAAKU,iBAAL,GAAyBF,qDAAM,CAACC,GAAP,CAAW,mBAAX,EAAgCD,qDAAM,CAACC,GAAP,CAAW,SAAX,EAAsBV,IAAI,KAAK,KAAT,GAAiB,OAAjB,GAA2B,UAAjD,CAAhC,CAAzB;AACH;AACJ;AAZiB;AAAA;AAAA,6BAaT;AACL,aAAQE,2DAAC,CAACC,mDAAD,EAAO;AAAEE,aAAK,EAAEJ,2DAAU,CAAC,IAAD;AAAnB,OAAP,EAAoCC,2DAAC,CAAC,KAAD,EAAQ;AAAEG,aAAK,EAAE;AAAT,OAAR,EAAwC,KAAKG,WAAL,IAClFN,2DAAC,CAAC,KAAD,EAAQ;AAAEG,aAAK,EAAE;AAAT,OAAR,EAA6CH,2DAAC,CAAC,UAAD,EAAa;AAAEU,YAAI,EAAE,KAAKJ,WAAb;AAA0BK,YAAI,EAAE;AAAhC,OAAb,CAA9C,CADyC,EAC6D,KAAKC,WAAL,IACvGZ,2DAAC,CAAC,KAAD,EAAQ;AAAEG,aAAK,EAAE,wBAAT;AAAmCU,iBAAS,EAAEC,4DAAiB,CAAC,KAAKF,WAAN;AAA/D,OAAR,CAFyC,CAArC,EAE2FZ,2DAAC,CAAC,KAAD,EAAQ;AAAEG,aAAK,EAAE;AAAT,OAAR,EAA2C,KAAKM,iBAAL,IAC5IT,2DAAC,CAAC,KAAD,EAAQ;AAAEG,aAAK,EAAE;AAAT,OAAR,EAAgDH,2DAAC,CAAC,aAAD,EAAgB;AAAEe,YAAI,EAAE,KAAKN;AAAb,OAAhB,CAAjD,CADgG,EACK,KAAKO,cAAL,IACtGhB,2DAAC,CAAC,KAAD,EAAQ;AAAEG,aAAK,EAAE,2BAAT;AAAsCU,iBAAS,EAAEC,4DAAiB,CAAC,KAAKE,cAAN;AAAlE,OAAR,CAFgG,CAF5F,CAAT;AAKH;AAnBiB;;AAAA;AAAA,GAAtB","file":"52.js","sourcesContent":["import { r as registerInstance, d as createEvent, w as writeTask, c as getIonMode, h, e as getElement, H as Host } from './core-feeeff0d.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { s as sanitizeDOMString } from './index-3476b023.js';\n\nconst Refresher = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.appliedStyles = false;\n        this.didStart = false;\n        this.progress = 0;\n        /**\n         * The current state which the refresher is in. The refresher's states include:\n         *\n         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\n         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\n         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\n         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\n         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\n         * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\n         */\n        this.state = 1 /* Inactive */;\n        /**\n         * The minimum distance the user must pull down until the\n         * refresher will go into the `refreshing` state.\n         */\n        this.pullMin = 60;\n        /**\n         * The maximum distance of the pull until the refresher\n         * will automatically go into the `refreshing` state.\n         * Defaults to the result of `pullMin + 60`.\n         */\n        this.pullMax = this.pullMin + 60;\n        /**\n         * Time it takes to close the refresher.\n         */\n        this.closeDuration = '280ms';\n        /**\n         * Time it takes the refresher to to snap back to the `refreshing` state.\n         */\n        this.snapbackDuration = '280ms';\n        /**\n         * How much to multiply the pull speed by. To slow the pull animation down,\n         * pass a number less than `1`. To speed up the pull, pass a number greater\n         * than `1`. The default value is `1` which is equal to the speed of the cursor.\n         * If a negative value is passed in, the factor will be `1` instead.\n         *\n         * For example: If the value passed is `1.2` and the content is dragged by\n         * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\n         * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\n         * will be `8` pixels, less than the amount the cursor has moved.\n         */\n        this.pullFactor = 1;\n        /**\n         * If `true`, the refresher will be hidden.\n         */\n        this.disabled = false;\n        this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\n        this.ionPull = createEvent(this, \"ionPull\", 7);\n        this.ionStart = createEvent(this, \"ionStart\", 7);\n    }\n    disabledChanged() {\n        if (this.gesture) {\n            this.gesture.setDisabled(this.disabled);\n        }\n    }\n    async connectedCallback() {\n        if (this.el.getAttribute('slot') !== 'fixed') {\n            console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n            return;\n        }\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-refresher> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.gesture = (await import('./index-624eea58.js')).createGesture({\n            el: contentEl,\n            gestureName: 'refresher',\n            gesturePriority: 10,\n            direction: 'y',\n            threshold: 20,\n            passive: false,\n            canStart: () => this.canStart(),\n            onStart: () => this.onStart(),\n            onMove: ev => this.onMove(ev),\n            onEnd: () => this.onEnd(),\n        });\n        this.disabledChanged();\n    }\n    disconnectedCallback() {\n        this.scrollEl = undefined;\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n    }\n    /**\n     * Call `complete()` when your async operation has completed.\n     * For example, the `refreshing` state is while the app is performing\n     * an asynchronous operation, such as receiving more data from an\n     * AJAX request. Once the data has been received, you then call this\n     * method to signify that the refreshing has completed and to close\n     * the refresher. This method also changes the refresher's state from\n     * `refreshing` to `completing`.\n     */\n    async complete() {\n        this.close(32 /* Completing */, '120ms');\n    }\n    /**\n     * Changes the refresher's state from `refreshing` to `cancelling`.\n     */\n    async cancel() {\n        this.close(16 /* Cancelling */, '');\n    }\n    /**\n     * A number representing how far down the user has pulled.\n     * The number `0` represents the user hasn't pulled down at all. The\n     * number `1`, and anything greater than `1`, represents that the user\n     * has pulled far enough down that when they let go then the refresh will\n     * happen. If they let go and the number is less than `1`, then the\n     * refresh will not happen, and the content will return to it's original\n     * position.\n     */\n    getProgress() {\n        return Promise.resolve(this.progress);\n    }\n    canStart() {\n        if (!this.scrollEl) {\n            return false;\n        }\n        if (this.state !== 1 /* Inactive */) {\n            return false;\n        }\n        // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n        if (this.scrollEl.scrollTop > 0) {\n            return false;\n        }\n        return true;\n    }\n    onStart() {\n        this.progress = 0;\n        this.state = 1 /* Inactive */;\n    }\n    onMove(detail) {\n        if (!this.scrollEl) {\n            return;\n        }\n        // this method can get called like a bazillion times per second,\n        // so it's built to be as efficient as possible, and does its\n        // best to do any DOM read/writes only when absolutely necessary\n        // if multi-touch then get out immediately\n        const ev = detail.event;\n        if (ev.touches && ev.touches.length > 1) {\n            return;\n        }\n        // do nothing if it's actively refreshing\n        // or it's in the way of closing\n        // or this was never a startY\n        if ((this.state & 56 /* _BUSY_ */) !== 0) {\n            return;\n        }\n        const pullFactor = (Number.isNaN(this.pullFactor) || this.pullFactor < 0) ? 1 : this.pullFactor;\n        const deltaY = detail.deltaY * pullFactor;\n        // don't bother if they're scrolling up\n        // and have not already started dragging\n        if (deltaY <= 0) {\n            // the current Y is higher than the starting Y\n            // so they scrolled up enough to be ignored\n            this.progress = 0;\n            this.state = 1 /* Inactive */;\n            if (this.appliedStyles) {\n                // reset the styles only if they were applied\n                this.setCss(0, '', false, '');\n                return;\n            }\n            return;\n        }\n        if (this.state === 1 /* Inactive */) {\n            // this refresh is not already actively pulling down\n            // get the content's scrollTop\n            const scrollHostScrollTop = this.scrollEl.scrollTop;\n            // if the scrollTop is greater than zero then it's\n            // not possible to pull the content down yet\n            if (scrollHostScrollTop > 0) {\n                this.progress = 0;\n                return;\n            }\n            // content scrolled all the way to the top, and dragging down\n            this.state = 2 /* Pulling */;\n        }\n        // prevent native scroll events\n        if (ev.cancelable) {\n            ev.preventDefault();\n        }\n        // the refresher is actively pulling at this point\n        // move the scroll element within the content element\n        this.setCss(deltaY, '0ms', true, '');\n        if (deltaY === 0) {\n            // don't continue if there's no delta yet\n            this.progress = 0;\n            return;\n        }\n        const pullMin = this.pullMin;\n        // set pull progress\n        this.progress = deltaY / pullMin;\n        // emit \"start\" if it hasn't started yet\n        if (!this.didStart) {\n            this.didStart = true;\n            this.ionStart.emit();\n        }\n        // emit \"pulling\" on every move\n        this.ionPull.emit();\n        // do nothing if the delta is less than the pull threshold\n        if (deltaY < pullMin) {\n            // ensure it stays in the pulling state, cuz its not ready yet\n            this.state = 2 /* Pulling */;\n            return;\n        }\n        if (deltaY > this.pullMax) {\n            // they pulled farther than the max, so kick off the refresh\n            this.beginRefresh();\n            return;\n        }\n        // pulled farther than the pull min!!\n        // it is now in the `ready` state!!\n        // if they let go then it'll refresh, kerpow!!\n        this.state = 4 /* Ready */;\n        return;\n    }\n    onEnd() {\n        // only run in a zone when absolutely necessary\n        if (this.state === 4 /* Ready */) {\n            // they pulled down far enough, so it's ready to refresh\n            this.beginRefresh();\n        }\n        else if (this.state === 2 /* Pulling */) {\n            // they were pulling down, but didn't pull down far enough\n            // set the content back to it's original location\n            // and close the refresher\n            // set that the refresh is actively cancelling\n            this.cancel();\n        }\n    }\n    beginRefresh() {\n        // assumes we're already back in a zone\n        // they pulled down far enough, so it's ready to refresh\n        this.state = 8 /* Refreshing */;\n        // place the content in a hangout position while it thinks\n        this.setCss(this.pullMin, this.snapbackDuration, true, '');\n        // emit \"refresh\" because it was pulled down far enough\n        // and they let go to begin refreshing\n        this.ionRefresh.emit({\n            complete: this.complete.bind(this)\n        });\n    }\n    close(state, delay) {\n        // create fallback timer incase something goes wrong with transitionEnd event\n        setTimeout(() => {\n            this.state = 1 /* Inactive */;\n            this.progress = 0;\n            this.didStart = false;\n            this.setCss(0, '0ms', false, '');\n        }, 600);\n        // reset set the styles on the scroll element\n        // set that the refresh is actively cancelling/completing\n        this.state = state;\n        this.setCss(0, this.closeDuration, true, delay);\n        // TODO: stop gesture\n    }\n    setCss(y, duration, overflowVisible, delay) {\n        this.appliedStyles = (y > 0);\n        writeTask(() => {\n            if (this.scrollEl) {\n                const style = this.scrollEl.style;\n                style.transform = ((y > 0) ? `translateY(${y}px) translateZ(0px)` : 'translateZ(0px)');\n                style.transitionDuration = duration;\n                style.transitionDelay = delay;\n                style.overflow = (overflowVisible ? 'hidden' : '');\n            }\n        });\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { slot: \"fixed\", class: {\n                [mode]: true,\n                // Used internally for styling\n                [`refresher-${mode}`]: true,\n                'refresher-active': this.state !== 1 /* Inactive */,\n                'refresher-pulling': this.state === 2 /* Pulling */,\n                'refresher-ready': this.state === 4 /* Ready */,\n                'refresher-refreshing': this.state === 8 /* Refreshing */,\n                'refresher-cancelling': this.state === 16 /* Cancelling */,\n                'refresher-completing': this.state === 32 /* Completing */\n            } }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n    static get style() { return \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;z-index:-1}:host-context([dir=rtl]) ion-refresher,[dir=rtl] ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:.2s;transition:.2s;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon,[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}.refresher-pulling ion-refresher-content .refresher-pulling,.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-cancelling ion-refresher-content .refresher-pulling,.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-icon,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-crescent circle,.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line{stroke:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color,#000)}\"; }\n};\n\nconst RefresherContent = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    componentWillLoad() {\n        if (this.pullingIcon === undefined) {\n            this.pullingIcon = config.get('refreshingIcon', 'arrow-down');\n        }\n        if (this.refreshingSpinner === undefined) {\n            const mode = getIonMode(this);\n            this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    }\n    render() {\n        return (h(Host, { class: getIonMode(this) }, h(\"div\", { class: \"refresher-pulling\" }, this.pullingIcon &&\n            h(\"div\", { class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { icon: this.pullingIcon, lazy: false })), this.pullingText &&\n            h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(this.pullingText) })), h(\"div\", { class: \"refresher-refreshing\" }, this.refreshingSpinner &&\n            h(\"div\", { class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { name: this.refreshingSpinner })), this.refreshingText &&\n            h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(this.refreshingText) }))));\n    }\n};\n\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };\n"],"sourceRoot":"webpack:///"}